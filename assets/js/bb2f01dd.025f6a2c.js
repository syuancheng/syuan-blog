"use strict";(self.webpackChunksyuan_blog=self.webpackChunksyuan_blog||[]).push([[60],{3905:function(e,o,t){t.d(o,{Zo:function(){return m},kt:function(){return h}});var n=t(7294);function a(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function i(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?i(Object(t),!0).forEach((function(o){a(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function l(e,o){if(null==e)return{};var t,n,a=function(e,o){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],o.indexOf(t)>=0||(a[t]=e[t]);return a}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),d=function(e){var o=n.useContext(s),t=o;return e&&(t="function"==typeof e?e(o):r(r({},o),e)),t},m=function(e){var o=d(e.components);return n.createElement(s.Provider,{value:o},e.children)},u={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},c=n.forwardRef((function(e,o){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=d(t),h=a,p=c["".concat(s,".").concat(h)]||c[h]||u[h]||i;return t?n.createElement(p,r(r({ref:o},m),{},{components:t})):n.createElement(p,r({ref:o},m))}));function h(e,o){var t=arguments,a=o&&o.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=c;var l={};for(var s in o)hasOwnProperty.call(o,s)&&(l[s]=o[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var d=2;d<i;d++)r[d]=t[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5261:function(e,o,t){t.r(o),t.d(o,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return m},default:function(){return c}});var n=t(7462),a=t(3366),i=(t(7294),t(3905)),r=["components"],l={slug:"Go module Basic",title:"How to go Module",author:"Syuan",author_title:"Back End Engineer @ Shopee",author_url:"https://github.com/syuancheng",author_image_url:"https://raw.githubusercontent.com/syuancheng/images/master/.github/resource/profile_460x460.jpg",tags:["Golang","go module"]},s=void 0,d={permalink:"/Go module Basic",editUrl:"https://github.com/syuancheng/syuancheng.github.io/blog/2022-08-27-go-module.md",source:"@site/blog/2022-08-27-go-module.md",title:"How to go Module",description:"It's easy to encounter some issues in your dependency management. Go module is a dependencies management tool of golang. Go mod is treated as default dependency management tool from go 1.13. And more and more golang developer start to use the Go module to manage their Go project. Based on this, it's necessary to study how to use go mod and how go mod works.",date:"2022-08-27T00:00:00.000Z",formattedDate:"August 27, 2022",tags:[{label:"Golang",permalink:"/tags/golang"},{label:"go module",permalink:"/tags/go-module"}],readingTime:6.57,truncated:!1,nextItem:{title:"\u8ba1\u7b97\u673a\u5b66\u4e60\u7684\u4e00\u4e9b\u6709\u7528\u5efa\u8bae",permalink:"/\u8ba1\u7b97\u673a\u5b66\u4e60\u7684\u4e00\u4e9b\u6709\u7528\u5efa\u8bae"}},m=[],u={toc:m};function c(e){var o=e.components,l=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},u,l,{components:o,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It's easy to encounter some issues in your dependency management. Go module is a dependencies management tool of golang. Go mod is treated as default dependency management tool from go 1.13. And more and more golang developer start to use the Go module to manage their Go project. Based on this, it's necessary to study how to use go mod and how go mod works."),(0,i.kt)("h4",{id:"modules-packages-and-versions"},"Modules, packages, and versions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Module: A module is a collection of packages that are released, versioned, and distributed together, a module is identified by a module path, which is declared in a go.mod file. For example, ",(0,i.kt)("a",{parentName:"p",href:"https://git.garena.com/shopee/deep/bff-rcmd"},"https://git.garena.com/shopee/deep/bff-rcmd")," is a module that have several packages in it, it has a go.mod file, whose first line declared the module path:  module git.garena.com/shopee/deep/bff-rcmd . For example, git.garena.com/shopee-server/merlion-monitor is one package of this module. A repo can contain multiple modules. For example,  although git.garena.com/shopee/deep/mnet/trigger is in a subdirectory of git.garena.com/shopee/deep/mnet, in go module definition the former is not to see a package of latter, because trigger has its own go.mod file to declare itself as a module and provide its dependencies information, it's a module what only have one package.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Version: A version identifies an immutable snapshot of a module. For example v1.3.5 and v0.0.0-20210408083853-bea4e61c1705, the former has a semantic version tags but the latter is a pseudo-version, which is compounded of a based version prefix, a timestamp(yyyymmddhhmmssin git it's the commit time) and a 12-character prefix of the commit hash.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"go.mod file: A module is defined by a UTF-8 encoded text file named go.mod in its root directory. The go.mod file is line-oriented. Each line holds a single directive, made up of a keyword followed by arguments. For example:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"module example.com/my/thing\n\ngo 1.12 \n\nrequire example.com/other/thing v1.0.2\nrequire example.com/new/thing/v2 v2.3.4\nexclude example.com/old/thing v1.2.3\nreplace example.com/bad/thing v1.4.5 => example.com/good/thing v1.4.5\nretract [v1.9.0, v1.9.5]\n")),(0,i.kt)("h4",{id:"directives-require-go-replace-exclude"},"Directives require, go, replace, exclude"),(0,i.kt)("h5",{id:"go"},"go"),(0,i.kt)("p",null,"A go directive indicates that a module was written assuming the\nsemantics of a given version of Go."),(0,i.kt)("h5",{id:"require"},"require"),(0,i.kt)("p",null,"A require directive declares a minimum required version of a given module dependency. For each required module version, the go command loads the go.mod file for that version and incorporates the requirements from that file. Once all requirements have been loaded, the go command resolves them using minimal version selection (MVS) to produce the build list.\nThe go command automatically adds // indirect comments for some requirements. An // indirect comment indicates that no package from the required module is directly imported by any package in the main module."),(0,i.kt)("h5",{id:"replace"},"replace"),(0,i.kt)("p",null,"A replace directive replaces the contents of a specific version of a module, or all versions of a module, with contents found elsewhere. The replacement may be specified with either another module path and version, or a platform-specific file path.\nIf a version is present on the left side of the arrow (=>), only that specific version of the module is replaced; other versions will be accessed normally. If the left version is omitted, all versions of the module are replaced.\nIf the path on the right side of the arrow is an absolute or relative path (beginning with ./ or ../), it is interpreted as the local file path to the replacement module root directory, which must contain a go.mod file. The replacement version must be omitted in this case.\nIf the path on the right side is not a local path, it must be a valid module path. In this case, a version is required. The same module version must not also appear in the build list.\nRegardless of whether a replacement is specified with a local path or module path, if the replacement module has a go.mod file, its module directive must match the module path it replaces.\nreplace directives only apply in the main module\u2019s go.mod file and are ignored in other modules. See Minimal version selection for details."),(0,i.kt)("h5",{id:"exclude"},"exclude"),(0,i.kt)("p",null,"An exclude directive prevents a module version from being loaded by the go command.\nSince Go 1.16, if a version referenced by a require directive in any go.mod file is excluded by an exclude directive in the main module\u2019s go.mod file, the requirement is ignored. This may cause commands like go get and go mod tidy to add new requirements on higher versions to go.mod, with an // indirect comment if appropriate."),(0,i.kt)("h4",{id:"solve-backward-incompatibility"},"Solve backward incompatibility"),(0,i.kt)("p",null,"As shown below, the main module requires 1.2 version of module A and 1.x version of module B, but module B  requires 1.1 version of module A. This situation appears commonly. Of course, module A 1.2 was chosen, because it's the highest version of all required versions.\n",(0,i.kt)("img",{alt:"image",src:t(6797).Z}),"\nIn the ideal situation, version should be backward compatibility, so choosing the highest version has no problem. But usually the backward compatibility is not satisfied in most modules . For example, the new version may change the signature of function, modules that use the old version will fail in building because function calling in the module does not fit to the new function signature. These are several solutions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Update codes in every module which depended on that module to fit in the highest version. In this case, you should update module B code to depend on A 1.2. This is only available when you can do all of the updating and you need the new feature in the highest version."),(0,i.kt)("li",{parentName:"ol"},"Find an old version or commit that satisfying all modules, use go get to downgrade to that version. For example, you find that v1.2.0 satisfying all modules, you can run 'go get <module_name>@v1.2.0', or you find that a commit satisfying all modules, you can run 'go get <module_name>@<first 12 chars of the commit hash>'. This is only available when you don't need the new features of the highest version."),(0,i.kt)("li",{parentName:"ol"},"Find an old version that satisfying all module and add 'replace' directive to appoint that version in go.mod file. You can see some 'replace' in the go.mod file show above. This is not recommended if you can solve the conflict in the above two ways. And this solution is also only available when you don't need the new features of the highest version.")),(0,i.kt)("h4",{id:"start-to-use-go-mod"},"Start to use go mod"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"go mod init <your module name, for example git.garena.com/zhaozw/cgzip> (create a go.mod file that contains module name)"),(0,i.kt)("li",{parentName:"ol"},"go mod tidy (to add requires in go.mod file)",(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"go mod tidy ensures that the go.mod file matches the source code in the module. It adds any missing module requirements necessary to build the current module\u2019s packages and dependencies, and it removes requirements on modules that don\u2019t provide any relevant packages. It also adds any missing entries to go.sum and removes unnecessary entries."))),(0,i.kt)("li",{parentName:"ol"},"go mod vendor  ",(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"The go mod vendor command constructs a directory named vendor in the main module\u2019s root directory that contains copies of all packages needed to support builds and tests of packages in the main module."))),(0,i.kt)("li",{parentName:"ol"},"go test (test the code can run correctly when depending on the modules in go.mod or not)")),(0,i.kt)("h4",{id:"how-to-update-dependency"},"How to update dependency"),(0,i.kt)("p",null,"If you need a new feature from a new version of module A, you need to do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd <your project root path>\ngo get <module A>@<new feature branch>\ngo mod vendor\n")),(0,i.kt)("h4",{id:"how--to-know-why-a-module-or-a-package-is-required-by"},"How  to know why a module or a package is required by"),(0,i.kt)("p",null,"'go mod why' can help you to see why your module requires a certain module or package.\nFor example, you need to know why git.garena.com/common/gocommon is required by your module, you can run 'go mod why -m git.garena.com/common/gocommon' then a shortest dependency path from your module to gocommon will be printed."),(0,i.kt)("h4",{id:"advices"},"Advices"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"As a maintainer, keep backward compatibility as much as you can. ",(0,i.kt)("a",{parentName:"li",href:"https://blog.golang.org/module-compatibility"},"https://blog.golang.org/module-compatibility")),(0,i.kt)("li",{parentName:"ol"},"Use the same version of a certain module if it's possible for all of your modules.")))}c.isMDXComponent=!0},6797:function(e,o,t){o.Z=t.p+"assets/images/gomod1-e1e65a99c27aa8233370b6913ce7652b.png"}}]);